using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GraphDecomposition.Interfaces;
using GraphDecomposition.GraphElements;

namespace GraphDecomposition.Algorithms
{
    public class StinsonContinous : Stinson, IDecompositionAlgorithm
    {
        /// <summary>
        /// Starts the algorithm
        /// </summary>
        /// <param name="v">Number of vertices in a graph</param>
        /// <returns>STS(v) generated by the algorithm</returns>
        public override SteinerTripleSystem StartAlgorithm(int v)
        {
            this.v = v;
            this.b = v * (v - 1) / 6;

            return StinsonsAlgorithm(v);
        }

        /// <summary>
        /// Generates a different decomposition (possibly isomorphic)
        /// </summary>
        /// <returns>STS(v)</returns>
        public SteinerTripleSystem NextDecomposition(SteinerTripleSystem sts)
        {
            RemoveRandBlocks(sts);

            while (NumBlocks < v * (v - 1) / 6)
            {
                Switch();
            }

            return ConstructBlocks(v, Other);
        }

        /// <summary>
        /// Removes rand number of blocks from the decomposition. Number of blocks removed ranges from half to all the blocks.
        /// </summary>
        private void RemoveRandBlocks(SteinerTripleSystem sts)
        {
            Random rand = new Random();

            int numbBlocksToRemove = rand.Next(sts.Count() / 2, sts.Count() + 1);
            for (int i = 0; i < numbBlocksToRemove; i++)
            {
                Triple triple = sts.Element(i);
                RemoveBlock(triple.X, triple.Y, triple.Z);
            }
        }

        private void RemoveBlock(int x, int y, int z)
        {
            Other[x, y] = 0;
            Other[y, x] = 0;
            Other[x, z] = 0;
            Other[z, x] = 0;
            Other[y, z] = 0;
            Other[z, y] = 0;

            InsertPair(x, y);
            InsertPair(y, x);
            InsertPair(x, z);
            InsertPair(z, x);
            InsertPair(y, z);
            InsertPair(z, y);

            this.NumBlocks = this.NumBlocks - 1;
        }
    }
}
