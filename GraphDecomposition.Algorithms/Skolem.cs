using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using GraphDecomposition.GraphElements;
using GraphDecomposition.Utils;


namespace GraphDecomposition.Algorithms
{
    public class Skolem
    {
        /// <summary>
        /// Number of vertices in a graph
        /// </summary>
        private int v;

        /// <summary>
        /// n defines the number of iterations of the construction
        /// </summary>
        private int n;

        /// <summary>
        /// Quasigroup matrix used for Skolem construction
        /// </summary>
        private Quasigroup quasigroup;

        /// <summary>
        /// Array of triples generated by the construction
        /// </summary>
        private Triple[] tripleArray;

        /// <summary>
        /// Index for the tripleArray
        /// </summary>
        private int index;


        /// <summary>
        /// Starts the Skolem construction
        /// </summary>
        /// <param name="v">Number of vertices in a graph</param>
        /// <returns>Array of triples generated by the construction</returns>
        public Triple[] StartAlgorithm(int v)
        {
            this.v = v;
            this.n = (v - 1) / 6;
            this.tripleArray = new Triple[n];
            this.index = 0;


            this.quasigroup = new Quasigroup(2 * n);

            CreateTypeOne();

            CreateTypeTwo();

            CreateTypeThree();

            return this.tripleArray;

        }

        private void CreateTypeOne()
        {
            for (int i = 1; i <= n; i++)
            {
                int firstVertex = ConstructionUtils.VertexNumberFromIndexSkolem(i, 1);
                int secondVertex = ConstructionUtils.VertexNumberFromIndexSkolem(i, 2);
                int thirdVertex = ConstructionUtils.VertexNumberFromIndexSkolem(i, 3);
                this.tripleArray[index] = new Triple(firstVertex, secondVertex, thirdVertex);
                index++;
            }
        }

        private void CreateTypeTwo()
        {
            for (int i = 1; i <= n; i++)
            {
                int firstVertex = ConstructionUtils.VertexNumberFromIndexSkolem(0, 0);
                int secondVertex = ConstructionUtils.VertexNumberFromIndexSkolem(n + i, 1);
                int thirdVertex = ConstructionUtils.VertexNumberFromIndexSkolem(i, 2);
                this.tripleArray[index] = new Triple(firstVertex, secondVertex, thirdVertex);
                index++;


                firstVertex = ConstructionUtils.VertexNumberFromIndexSkolem(0, 0);
                secondVertex = ConstructionUtils.VertexNumberFromIndexSkolem(n + i, 2);
                thirdVertex = ConstructionUtils.VertexNumberFromIndexSkolem(i, 3);
                this.tripleArray[index] = new Triple(firstVertex, secondVertex, thirdVertex);
                index++;

                firstVertex = ConstructionUtils.VertexNumberFromIndexSkolem(0, 0);
                secondVertex = ConstructionUtils.VertexNumberFromIndexSkolem(n + i, 3);
                thirdVertex = ConstructionUtils.VertexNumberFromIndexSkolem(i, 1);
                this.tripleArray[index] = new Triple(firstVertex, secondVertex, thirdVertex);
                index++;
            }
        }

        private void CreateTypeThree()
        {
            for (int i = 1; i <= 2 * n; i++)
            {
                for (int j = i + 1; j <= 2 * n; j++)
                {
                    int firstVertex = ConstructionUtils.VertexNumberFromIndexSkolem(i, 1);
                    int secondVertex = ConstructionUtils.VertexNumberFromIndexSkolem(j, 1);
                    int thirdVertex = ConstructionUtils.VertexNumberFromIndexSkolem(this.quasigroup.GetElement(i,j), 2);
                    this.tripleArray[index] = new Triple(firstVertex, secondVertex, thirdVertex);
                    index++;

                    firstVertex = ConstructionUtils.VertexNumberFromIndexSkolem(i, 2);
                    secondVertex = ConstructionUtils.VertexNumberFromIndexSkolem(j, 2);
                    thirdVertex = ConstructionUtils.VertexNumberFromIndexSkolem(this.quasigroup.GetElement(i, j), 3);
                    this.tripleArray[index] = new Triple(firstVertex, secondVertex, thirdVertex);
                    index++;

                    firstVertex = ConstructionUtils.VertexNumberFromIndexSkolem(i, 3);
                    secondVertex = ConstructionUtils.VertexNumberFromIndexSkolem(j, 3);
                    thirdVertex = ConstructionUtils.VertexNumberFromIndexSkolem(this.quasigroup.GetElement(i, j), 1);
                    this.tripleArray[index] = new Triple(firstVertex, secondVertex, thirdVertex);
                    index++;
                }
            }
        }

    }
}
